name: Image build workflow

on:
  workflow_dispatch:

  release:
    types: [prereleased, released]

  pull_request:   
    types: [labeled, synchronize]

jobs:
  calculate_matrix:
    if: ${{ github.event_name != 'pull_request'  || contains(github.event.pull_request.labels.*.name, 'autodeploy') }} 
    env:
      registry: cbxacr.azurecr.io/cbx/councilbox-client
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.calculate_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: calculate_matrix
        id: calculate_matrix
        uses: prefapp/action-flavour-images-matrix-generator@v1
        with:
          repository: ${{ env.repository }}
  build-image:
    env:
      registry_url: cbxacr.azurecr.io
      repository_name: cbx/councilbox-client

    runs-on: ubuntu-latest
    needs: 
      - "calculate_matrix"
    strategy:
      matrix: ${{fromJson(needs.calculate_matrix.outputs.matrix)}}
    steps:
      - run: |
            echo ${{ matrix.tags}}
            echo ${{ matrix.build_args}}
            echo ${{ matrix.dockerfile}}
      - uses: actions/checkout@v2
  
      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZ_CREDENTIALS_AKS_PREDEV }}

      - name: Login acr
        run: |
              ACCESS_TOKEN=$(az acr login --name ${{ env.registry_url }} --expose-token --output tsv --query accessToken)
              docker login ${{ env.registry_url }} -u 00000000-0000-0000-0000-000000000000 -p $ACCESS_TOKEN
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: ${{ matrix.build_args }}
          file: ${{ matrix.dockerfile }}
          tags: ${{ matrix.tags }}
          push: true

  make-dispatches:
    needs: build-image
    runs-on: ubuntu-latest
    env:
      registry_url: cbxacr.azurecr.io
      repository_name: cbx/councilbox-client
      state_repo: cbx-state
    steps:
      - uses: actions/checkout@v2
        
      - name: Dispatch changes
        uses: prefapp/action-deployment-dispatch@v2
        with:
          state_repo: ${{ env.state_repo }}
          image_repository: ${{ env.registry_url }}/${{ env.repository_name }}
          token: ${{ secrets.REPO_STATE_TOKEN }}
          